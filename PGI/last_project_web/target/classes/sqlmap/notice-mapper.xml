<?xml version="1.0" encoding="UTF-8"?>
<!DOCTYPE mapper PUBLIC "-//mybatis.org//DTD Mapper 3.0//EN" "http://mybatis.org/dtd/mybatis-3-mapper.dtd">
<mapper namespace="notice">

<!-- 공지글 답글신규저장
<insert id='reply_insert'>
 
답글의 root: 원글의 root
답글의 step: 원글의 step +1 
답글의 indent: 원글의 indent +1 

답글저장시
원글과  root가 같고, 원글의 step보다 더 큰 step을 가진 글에 대해
step +1 -> step

<![CDATA[ 
{
call declare begin
	update notice set step=step+1 where root = #{root} and step > #{step};
	
	insert into notice( title, content, )
	values ( #{title}, #{content});
end
}
]]>
</insert> -->

<!-- 공지글삭제 -->
<delete id='delete'>
delete from notice where id=#{id} 
</delete>

<!-- 공지글변경저장 -->
<update id="update">
update notice set title=#{title}, content=#{content}
				
where id=#{id}
</update>

<!-- 조회수증가처리 -->
<update id='read'>
update notice set readcnt = readcnt + 1 
where id=#{id}
</update>

<!-- 공지글정보 조회 -->
<select id='detail' resultType='notice.NoticeVO'>
select * 
from notice 
where id=#{id}
</select>

<!-- 신규 공지글 삽입저장 -->
<insert id="insert">
insert into notice (title, content)
values (#{title}, #{content})
</insert>


<sql id='like'>
like '%' || #{keyword} || '%'
</sql>

<!-- 검색조건 -->
<sql id='search_where'>
	<choose>
		<when test="search=='title' or search=='content'">
		where ${search} <include refid="like"/>
		</when>
		<when test="search=='all'">
		where title <include refid="like"/>
		or content <include refid="like"/>
		</when>
	</choose>
</sql>


<!-- 공지글의 총 건수 조회 -->
<select id='totalList' resultType='integer'>
select count(*) from notice <include refid="search_where"/>
</select>

<!-- 공지글목록조회 -->
<select id='list' resultType='notice.NoticeVO'>
select  *
from 	notice 
<!-- where   <include refid="search_where"/> -->
order by TODAY desc 
<!--  
select *
from (select rownum no, n.*
      from (select n.*, name from notice n left outer join member m on n.writer=m.userid
            <include refid="search_where"/> order by root, step desc) n
      order by no desc) n  
where no between #{beginList} and #{endList}
-->

<!--  
select rownum no, n.*
from (select n.*, name from notice n left outer join member m on n.writer=m.userid
      order by root, step desc) n
order by no desc    
-->
</select>

</mapper>